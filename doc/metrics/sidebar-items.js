initSidebarItems({"enum":[["MetricEventType",""]],"fn":[["get_destructor",""],["initialize","This interface exists to be used and re-implemented by downstream forks. Updates shouldn’t be done without ensuring they won’t cause breakages in dependent codebases."],["is_initialized",""],["log_descriptor",""],["log_event",""],["log_event_with_details",""],["log_high_frequency_descriptor_event",""],["log_histogram_metric",""],["log_metric",""],["merge_session_invariants",""],["set_auth_token",""],["set_graphics_api",""],["set_package_name",""]],"mod":[["controller","Encapsulate the main runtime loop of a metrics process."],["event_details_proto","Generated file from `protos/event_details.proto`"],["event_types",""],["metrics_cleanup","Provides an tool for metrics client cleanup which may hold global state."],["metrics_requests","Structs used to transport log requests between client processes and the logging controller"],["noop","Provides noop implementations of metrics interfaces, to be used by builds which don’t wish to log metrics."],["sys",""]],"struct":[["MetricsClientDestructor","Ensures any cleanup necessary is performed on drop. Can be used to ensure cleanup is done regardless of how the caller exits. Should be idempotent."],["MetricsController","Runs the metrics controller."],["NoopMetricsRequestHandler",""],["PeriodicLogger","A logging struct meant for use in tracking and periodically logging a single metric. The metric is aggregated over the designated time period. Intended for use with high-frequency metrics."]],"type":[["RequestHandler",""]]});