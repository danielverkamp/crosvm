initSidebarItems({"constant":[["INVALID_DESCRIPTOR",""],["SCM_SOCKET_MAX_FD_COUNT","The maximum number of FDs that can be sent in a single send."]],"derive":[["EventToken","Implements the EventToken trait for a given `enum`."]],"enum":[["BlockingMode",""],["EventReadResult","Wrapper around the return value of doing a read on an EventFd which distinguishes between getting a valid count of the number of times the eventfd has been written to and timing out waiting for the count to be non-zero."],["EventType","Represents types of events to watch for."],["FileFlags",""],["FramingMode",""],["MmapError",""],["TubeError",""],["VmEventType",""]],"fn":[["clear_descriptor_cloexec","Clears CLOEXEC flag on descriptor"],["clone_descriptor","Clones `descriptor`, returning a new `RawDescriptor` that refers to the same open file description as `descriptor`. The cloned descriptor will have the `FD_CLOEXEC` flag set but will not share any other file descriptor flags with `descriptor`."],["drop_capabilities","Drops all capabilities (permitted, inheritable, and effective) from the current process."],["enable_core_scheduling","Enable experimental core scheduling for the current thread."],["errno_result","Returns the last errno as a Result that is always an error."],["generate_uuid","Creates a UUID."],["get_cpu_affinity",""],["get_filesystem_type","Obtain file system type of the file system that the file is served from."],["kernel_has_memfd","Checks if the kernel we are running on has memfd_create. It was introduced in 3.17. Only to be used from tests to prevent running on ancient kernels that wonâ€™t support the functionality anyways."],["read_raw_stdin","Read raw bytes from stdin."],["set_cpu_affinity","Set the CPU affinity of the current thread to a given set of CPUs."],["set_rt_prio_limit","Enables real time thread priorities in the current thread up to `limit`."],["set_rt_round_robin","Sets the current thread to be scheduled using the round robin real time class with `priority`."]],"macro":[["debug","Logs a message at the debug level."],["error","Logs a message at the error level."],["handle_eintr","Macro that retries the given expression every time its result indicates it was interrupted (i.e. returned `EINTR`). This is useful for operations that are prone to being interrupted by signals, such as blocking syscalls."],["handle_eintr_errno","Macro that retries the given expression every time its result indicates it was interrupted. It is intended to use with system functions that signal error by returning `-1` and setting `errno` to appropriate error code (`EINTR`, `EINVAL`, etc.) Most of standard non-reentrant libc functions use this way of signalling errors."],["handle_eintr_rc","Macro that retries the given expression every time its result indicates it was interrupted. It is intended to use with system functions that return `EINTR` and other error codes directly as their result. Most of reentrant functions use this way of signalling errors."],["info","Logs a message at the info level."],["ioctl_expr","Raw macro to declare the expression that calculates an ioctl number"],["ioctl_io_nr","Declare an ioctl that transfers no data."],["ioctl_ioc_nr","Raw macro to declare a function that returns an ioctl number."],["ioctl_ior_nr","Declare an ioctl that reads data."],["ioctl_iow_nr","Declare an ioctl that writes data."],["ioctl_iowr_nr","Declare an ioctl that reads and writes data."],["syscall",""],["trace","Logs a message at the trace level."],["volatile_at_impl",""],["volatile_impl",""],["warn","Logs a message at the warn level."]],"mod":[["alloc",""],["clock",""],["descriptor",""],["descriptor_reflection","Provides infrastructure for de/serializing descriptors embedded in Rust data structures."],["errno",""],["event",""],["external_mapping",""],["mmap",""],["notifiers",""],["shm",""],["sys",""],["syslog","Facilities for sending log message to syslog."],["timer",""],["tube",""],["wait_context",""],["write_zeroes",""]],"struct":[["AcpiNotifyEvent",""],["Clock",""],["Error","A system error In Unix systems, retrieved from errno (man 3 errno), set by a libc function that returned an error. On Windows, retrieved from GetLastError, set by a Windows function that returned an error"],["Event","See the platform-specific Event struct for struct- and method-level documentation."],["EventContext","Used to poll multiple objects that have file descriptors."],["EventFd","A safe wrapper around a Linux eventfd (man 2 eventfd)."],["FakeClock","A fake clock that can be used in tests to give exact control over the time. For a code example, see the tests in base/src/timer.rs."],["FakeTimer","FakeTimer: For use in tests."],["LayoutAllocation","A contiguous memory allocation with a specified size and alignment, with a Drop impl to perform the deallocation."],["MemfdSeals","A set of memfd seals."],["MemoryMapping","See MemoryMapping for struct- and method-level documentation."],["MemoryMappingArena","Tracks Fixed Memory Maps within an anonymous memory-mapped fixed-sized arena in the current process."],["MemoryMappingBuilder",""],["NetlinkGenericSocket","Safe wrapper for `NETLINK_GENERIC` netlink sockets."],["Protection","Memory access type for anonymous shared memory mapping."],["RecvTube","A Tube end which can only recv messages."],["SendTube","A Tube end which can only send messages. Cloneable."],["SharedMemory","See SharedMemory for struct- and method-level documentation."],["SignalFd","A safe wrapper around a Linux signalfd (man 2 signalfd)."],["StreamChannel","An abstraction over named pipes and unix socketpairs. This abstraction can be used in a blocking and non blocking mode."],["Timer",""],["TriggeredEvent","Represents an event that has been signaled and waited for via a wait function."],["Tube","Bidirectional tube that support both send and recv."],["WaitContext","Used to wait for multiple objects which are eligible for waiting."]],"trait":[["CloseNotifier",""],["EnabledHighResTimer","An empty trait that helps reset timer resolution to its previous state."],["EventToken","Trait that can be used to associate events with arbitrary enums when using `WaitContext`."],["MappedRegion","A range of memory that can be msynced, for abstracting over different types of memory mappings."],["MemoryMappingBuilderUnix",""],["MemoryMappingUnix",""],["PunchHole","A trait for deallocating space in a file."],["ReadNotifier",""],["ScmSocket","Trait for file descriptors can send and receive socket control messages via `sendmsg` and `recvmsg`."],["SharedMemoryUnix",""],["Terminal","Trait for file descriptors that are TTYs, according to `isatty(3)`."],["WriteZeroesAt","A trait for writing zeroes to an arbitrary position in a file."]],"type":[["RawDescriptor",""],["Result",""],["TubeResult",""]]});