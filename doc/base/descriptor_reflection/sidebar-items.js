initSidebarItems({"constant":[["DESCRIPTOR_DST",""],["DESCRIPTOR_SRC",""]],"fn":[["deserialize_descriptor","Deserializes a descriptor provided via `deserialize_with_descriptors`."],["deserialize_with_descriptors","Allows the use of any serde deserializer within a closure while providing access to the a set of descriptors for use in `deserialize_descriptor`."],["init_descriptor_dst","Initializes the thread local storage for descriptor serialization. Fails if it was already initialized without an intervening `take_descriptor_dst` on this thread."],["push_descriptor","Pushes a descriptor on the thread local destination of descriptors, returning the index in which the descriptor was pushed. Returns Err if the thread local destination was not already initialized."],["serialize_descriptor","Serializes a descriptor for later retrieval in a parent `SerializeDescriptors` struct."],["set_descriptor_src","Sets the thread local storage of descriptors for deserialization. Fails if this was already called without a call to `take_descriptor_src` on this thread."],["take_descriptor","Takes a descriptor at the given index from the thread local source of descriptors. Returns None if the thread local source was not already initialized."],["take_descriptor_dst","Takes the thread local storage for descriptor serialization. Fails if there wasnâ€™t a prior call to `init_descriptor_dst` on this thread."],["take_descriptor_src","Takes the thread local storage of descriptors for deserialization. Fails if the storage was already taken or never set with `set_descriptor_src`."]],"mod":[["with_as_descriptor","Module that exports `serialize`/`deserialize` functions for use with `#[serde(with = \"...\")]` attribute."],["with_raw_descriptor","Module that exports `serialize`/`deserialize` functions for use with `#[serde(with = \"...\")]` attribute. It only works with fields with `RawDescriptor` type."]],"struct":[["FileSerdeWrapper","A simple wrapper around `File` that implements `Serialize`/`Deserialize`, which is useful when the `#[serde(with = \"with_as_descriptor\")]` trait is infeasible, such as for a field with type `Option<File>`."],["SerializeDescriptors","Wrapper for a `Serialize` value which will capture any descriptors exported by the value when given to an ordinary `Serializer`."]]});