initSidebarItems({"constant":[["INVALID_DESCRIPTOR",""],["PROT_READ",""],["PROT_WRITE",""],["SCM_SOCKET_MAX_FD_COUNT","The maximum number of FDs that can be sent in a single send."]],"enum":[["AcpiEventError",""],["BlockingMode",""],["Error",""],["Error",""],["FallocateMode","The operation to perform with `fallocate`."],["FileFlags",""],["FlockOperation","The operation to perform with `flock`."],["FramingMode",""],["MmapError",""],["SignalFdError",""],["WaitStatus","A logical set of the values *status can take from libc::wait and libc::waitpid."]],"fn":[["add_fd_flags","Performs a logical OR of the given flags with the FD’s flags, setting the given bits for the FD."],["chown","Safe wrapper for chown(2)."],["clear_descriptor_cloexec","Clears CLOEXEC flag on descriptor"],["clear_fd_flags","Clears the given flags in the FD’s flags."],["clone_descriptor","Clones `descriptor`, returning a new `RawDescriptor` that refers to the same open file description as `descriptor`. The cloned descriptor will have the `FD_CLOEXEC` flag set but will not share any other file descriptor flags with `descriptor`."],["drop_capabilities","Drops all capabilities (permitted, inheritable, and effective) from the current process."],["duration_to_timespec","Return a timespec filed with the specified Duration `duration`."],["enable_core_scheduling","Enable experimental core scheduling for the current thread."],["errno_result","Returns the last errno as a Result that is always an error."],["fallocate","Safe wrapper for `fallocate()`."],["fchmod","Safe wrapper for fchmod(2)."],["fchown","Safe wrapper for fchown(2)."],["flock","Safe wrapper for flock(2) with the operation `op` and optionally `nonblocking`. The lock will be dropped automatically when `file` is dropped."],["get_cpu_affinity",""],["get_fd_flags","Returns the file flags set for the given `RawFD`"],["get_filesystem_type","Obtain file system type of the file system that the file is served from."],["get_max_open_files","Get the max number of open files allowed by the environment."],["getegid","Safe wrapper for `getegid(2)`."],["geteuid","Safe wrapper for `geteuid(2)`."],["getpid","This bypasses `libc`’s caching `getpid(2)` wrapper which can be invalid if a raw clone was used elsewhere."],["getsid","Safe wrapper for `getsid(2)`."],["gettid","Safe wrapper for the gettid Linux systemcall."],["iov_max","Safe wrapper for `sysconf(_SC_IOV_MAX)`."],["kernel_has_memfd","Checks if the kernel we are running on has memfd_create. It was introduced in 3.17. Only to be used from tests to prevent running on ancient kernels that won’t support the functionality anyways."],["kill_process_group","Kill all processes in the current process group."],["max_timeout","Return the maximum Duration that can be used with libc::timespec."],["new_pipe_full","Test-only function used to create a pipe that is full. The pipe is created, has its size set to the minimum and then has that much data written to it. Use `new_pipe_full` to test handling of blocking `write` calls in unit tests."],["number_of_logical_cores","Returns the number of online logical cores on the system."],["open_file","Open the file with the given path, or if it is of the form `/proc/self/fd/N` then just use the file descriptor."],["pagesize","Safe wrapper for `sysconf(_SC_PAGESIZE)`."],["pipe","Spawns a pipe pair where the first pipe is the read end and the second pipe is the write end."],["poll_in","Utility function that returns true if the given FD is readable without blocking."],["read_raw_stdin","Read raw bytes from stdin."],["reap_child","Reaps a child process that has terminated."],["round_up_to_page_size","Uses the system’s page size in bytes to round the given value up to the nearest page boundary."],["safe_descriptor_from_path","If the given path is of the form /proc/self/fd/N for some N, returns `Ok(Some(N))`. Otherwise returns `Ok(None)`."],["set_cpu_affinity","Set the CPU affinity of the current thread to a given set of CPUs."],["set_fd_flags","Sets the file flags set for the given `RawFD`."],["set_pipe_size","Sets the pipe signified with fd to `size`."],["set_rt_prio_limit","Enables real time thread priorities in the current thread up to `limit`."],["set_rt_round_robin","Sets the current thread to be scheduled using the round robin real time class with `priority`."],["setsid","Wrapper for `setsid(2)`."],["validate_raw_descriptor","Verifies that |raw_descriptor| is actually owned by this process and duplicates it to ensure that we have a unique handle to it."],["validate_raw_fd","Verifies that |raw_fd| is actually owned by this process and duplicates it to ensure that we have a unique handle to it."],["wait_for_pid","A safe wrapper around waitpid."]],"mod":[["acpi_event",""],["capabilities",""],["descriptor",""],["eventfd",""],["file_flags",""],["file_traits",""],["get_filesystem_type",""],["handle_eintr","Macro and helper trait for handling interrupted routines."],["ioctl","Macros and wrapper functions for dealing with ioctls."],["linux","Linux-specific utility modules."],["mmap","The mmap module provides a safe interface to mmap memory and ensures unmap is called when the mmap object leaves scope."],["net",""],["netlink",""],["notifiers",""],["panic_handler","A panic handler for better crash signatures for rust apps."],["platform_timer_resolution",""],["poll",""],["priority",""],["sched","Wrappers for CPU affinity functions."],["scoped_signal_handler","Provides a struct for registering signal handlers that get cleared on drop."],["shm",""],["signal",""],["signalfd",""],["sock_ctrl_msg","Used to send and receive messages with file descriptors on sockets that accept control messages (e.g. Unix domain sockets)."],["stream_channel",""],["syslog",""],["terminal",""],["timer",""],["vsock",""],["write_zeroes",""]],"struct":[["AcpiNotifyEvent",""],["Error","A system error In Unix systems, retrieved from errno (man 3 errno), set by a libc function that returned an error. On Windows, retrieved from GetLastError, set by a Windows function that returned an error"],["Error","A system error In Unix systems, retrieved from errno (man 3 errno), set by a libc function that returned an error. On Windows, retrieved from GetLastError, set by a Windows function that returned an error"],["Event","A safe wrapper around a Linux eventfd (man 2 eventfd)."],["EventContext","Used to poll multiple objects that have file descriptors."],["EventFd","A safe wrapper around a Linux eventfd (man 2 eventfd)."],["GenlMsgHdr","Generic netlink header struct, can be used by netlink consumer"],["MemfdSeals","A set of memfd seals."],["MemoryMapping","Wraps an anonymous shared memory mapping in the current process. Provides RAII semantics including munmap when no longer needed."],["MemoryMappingArena","Tracks Fixed Memory Maps within an anonymous memory-mapped fixed-sized arena in the current process."],["NetlinkGenericDataIter","Iterator over `struct NlAttr` as received from a netlink socket."],["NetlinkGenericRead",""],["NetlinkGenericSocket","Safe wrapper for `NETLINK_GENERIC` netlink sockets."],["NetlinkMessage","A single netlink message, including its header and data."],["NetlinkMessageIter","Iterator over `struct nlmsghdr` as received from a netlink socket."],["NlAttr","Netlink attribute struct, can be used by netlink consumer"],["NlAttrWithData",""],["SharedMemory","A shared memory file descriptor and its size."],["SignalFd","A safe wrapper around a Linux signalfd (man 2 signalfd)."],["StreamChannel","An abstraction over named pipes and unix socketpairs. This abstraction can be used in a blocking and non blocking mode."],["UnlinkUnixDatagram","Used to attempt to clean up a named pipe after it is no longer used."],["UnlinkUnixListener","Used to attempt to clean up a named pipe after it is no longer used."]],"trait":[["AsIobuf","Trait for types that can be converted into an `iovec` that can be referenced by a syscall for the lifetime of this object."],["AsRawPid","A trait used to abstract types that provide a process id that can be operated on."],["MemoryMappingBuilderUnix",""],["ScmSocket","Trait for file descriptors can send and receive socket control messages via `sendmsg` and `recvmsg`."],["SharedMemoryUnix",""],["Terminal","Trait for file descriptors that are TTYs, according to `isatty(3)`."],["Unix",""]],"type":[["Gid",""],["Mode",""],["Pid","Re-export libc types that are part of the API."],["RawDescriptor",""],["Result",""],["Result",""],["Result",""],["Result",""],["Uid",""],["UnsyncMarker","Used to mark types as !Sync."]]});