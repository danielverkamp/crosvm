initSidebarItems({"constant":[["AVERROR_EAGAIN",""],["AVERROR_EOF",""],["AVERROR_INVALIDDATA",""],["AVPixelFormat_AV_PIX_FMT_NV12",""],["AV_CODEC_CAP_DR1",""],["AV_NOPTS_VALUE",""],["FF_PROFILE_H264_BASELINE",""],["FF_PROFILE_H264_EXTENDED",""],["FF_PROFILE_H264_HIGH",""],["FF_PROFILE_H264_HIGH_10",""],["FF_PROFILE_H264_HIGH_422",""],["FF_PROFILE_H264_HIGH_444_PREDICTIVE",""],["FF_PROFILE_H264_MAIN",""],["FF_PROFILE_H264_MULTIVIEW_HIGH",""],["FF_PROFILE_H264_STEREO_HIGH",""],["FF_PROFILE_HEVC_MAIN",""],["FF_PROFILE_HEVC_MAIN_10",""],["FF_PROFILE_HEVC_MAIN_STILL_PICTURE",""],["FF_PROFILE_VP9_0",""],["FF_PROFILE_VP9_1",""],["FF_PROFILE_VP9_2",""],["FF_PROFILE_VP9_3",""]],"fn":[["max_buffer_alignment","Get the maximum data alignment that may be required by FFmpeg. This could change depending on FFmpegâ€™s build configuration (AVX etc.)."]],"mod":[["avcodec","This module implements a lightweight and safe decoder interface over `libavcodec`. It is designed to concentrate all calls to unsafe methods in one place, while providing the same low-level access as the libavcodec functions do."],["avutil",""],["error",""],["ffi",""],["swscale","This module implements a lightweight and safe interface over the conversion functions of `libswscale`. It is designed to concentrate all calls to unsafe methods in one place, while providing a higher-level interface for converting decoded frames from one format to another."]]});