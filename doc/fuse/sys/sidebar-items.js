initSidebarItems({"constant":[["ABORT_ERROR","Reading the device after an abort returns `ECONNABORTED`."],["ASYNC_DIO","Asynchronous direct I/O submission."],["ASYNC_READ","Asynchronous read requests."],["ATOMIC_O_TRUNC","Handles the O_TRUNC open flag in the filesystem."],["AUTO_INVAL_DATA","Automatically invalidate cached pages."],["BIG_WRITES","FileSystem can handle write size larger than 4kB."],["CACHE_SYMLINKS","Cache `readlink` responses."],["DONT_MASK","Don’t apply umask to file mode on create operations."],["DO_READDIRPLUS","Do READDIRPLUS (READDIR+LOOKUP in one)."],["EXPLICIT_INVAL_DATA","Kernel supports explicit cache invalidation."],["EXPORT_SUPPORT","FileSystem handles lookups of “.” and “..”."],["FATTR_ATIME",""],["FATTR_ATIME_NOW",""],["FATTR_CTIME",""],["FATTR_FH",""],["FATTR_GID",""],["FATTR_LOCKOWNER",""],["FATTR_MODE",""],["FATTR_MTIME",""],["FATTR_MTIME_NOW",""],["FATTR_SIZE",""],["FATTR_UID",""],["FILE_OPS","Kernel sends file handle for fstat, etc… (not yet supported)."],["FLOCK_LOCKS","Remote locking for BSD style file locks."],["FOPEN_CACHE_DIR","Allow caching the directory entries."],["FOPEN_DIRECT_IO","Bypass page cache for this open file."],["FOPEN_KEEP_CACHE","Don’t invalidate the data cache on open."],["FOPEN_NONSEEKABLE","The file is not seekable."],["FOPEN_STREAM","This file is stream-like (i.e., no file position)."],["FUSE_COMPAT_22_INIT_OUT_SIZE",""],["FUSE_COMPAT_ATTR_OUT_SIZE",""],["FUSE_COMPAT_ENTRY_OUT_SIZE",""],["FUSE_COMPAT_INIT_OUT_SIZE",""],["FUSE_COMPAT_MKNOD_IN_SIZE",""],["FUSE_COMPAT_STATFS_SIZE",""],["FUSE_COMPAT_WRITE_IN_SIZE",""],["FUSE_MIN_READ_BUFFER","The read buffer is required to be at least 8k, but may be much larger."],["GETATTR_FH",""],["HANDLE_KILLPRIV","Fs handles killing suid/sgid/cap on write/chown/trunc."],["HAS_IOCTL_DIR","Kernel supports ioctl on directories."],["IOCTL_32BIT","32bit ioctl"],["IOCTL_COMPAT","32bit compat ioctl on 64bit machine"],["IOCTL_COMPAT_X32","32-bit compat ioctl on 64-bit machine with 64-bit time_t."],["IOCTL_DIR","Is a directory"],["IOCTL_MAX_IOV","Maximum of in_iovecs + out_iovecs"],["IOCTL_RETRY","Retry with new iovecs"],["IOCTL_UNRESTRICTED","Not restricted to well-formed ioctls, retry allowed"],["KERNEL_MINOR_VERSION","Minor version number of this interface."],["KERNEL_VERSION","Version number of this interface."],["LK_FLOCK",""],["MAP_ALIGNMENT","The `map_alignment` field of the `InitOut` struct is valid."],["MAX_PAGES","The reply to the `init` message contains the max number of request pages."],["NO_OPENDIR_SUPPORT","Kernel supports zero-message opens for directories."],["NO_OPEN_SUPPORT","Kernel supports zero-message opens."],["OLDEST_SUPPORTED_KERNEL_MINOR_VERSION","Oldest supported minor version of the fuse interface."],["PARALLEL_DIROPS","Allow parallel lookups and readdir."],["POLL_SCHEDULE_NOTIFY","Request poll notify."],["POSIX_ACL","FileSystem supports posix acls."],["POSIX_LOCKS","Remote locking for POSIX file locks."],["READDIRPLUS_AUTO","Adaptive readdirplus."],["READ_LOCKOWNER",""],["RELEASE_FLOCK_UNLOCK",""],["RELEASE_FLUSH",""],["ROOT_ID","The ID of the inode corresponding to the root directory of the file system."],["SETUPMAPPING_FLAG_READ",""],["SETUPMAPPING_FLAG_WRITE",""],["SPLICE_MOVE","Kernel supports splice move on the device."],["SPLICE_READ","Kernel supports splice read on the device."],["SPLICE_WRITE","Kernel supports splice write on the device."],["WRITEBACK_CACHE","Use writeback cache for buffered writes."],["WRITE_CACHE","Delayed write from page cache, file handle is guessed."],["WRITE_KILL_PRIV","Kill the suid and sgid bits."],["WRITE_LOCKOWNER","`lock_owner` field is valid."]],"enum":[["NotifyOpcode",""],["Opcode",""]],"struct":[["AccessIn",""],["Attr",""],["AttrOut",""],["BatchForgetIn",""],["BmapIn",""],["BmapOut",""],["ChromeOsTmpfileIn",""],["CopyFileRangeIn",""],["CreateIn",""],["Dirent",""],["Direntplus",""],["EntryOut",""],["FallocateIn",""],["FileLock",""],["FlushIn",""],["ForgetIn",""],["ForgetOne",""],["FsOptions","A bitfield passed in as a parameter to and returned from the `init` method of the `FileSystem` trait."],["FsyncIn",""],["GetattrIn",""],["GetxattrIn",""],["GetxattrOut",""],["InHeader",""],["InitIn",""],["InitOut",""],["InterruptIn",""],["IoctlFlags",""],["IoctlIn",""],["IoctlIovec","Describes a region of memory in the address space of the process that made the ioctl syscall. Similar to `libc::iovec` but uses `u64`s for the address and the length."],["IoctlOut",""],["Kstatfs",""],["LinkIn",""],["LkIn",""],["LkOut",""],["LseekIn",""],["LseekOut",""],["MkdirIn",""],["MknodIn",""],["NotifyDeleteOut",""],["NotifyInvalEntryOut",""],["NotifyInvalInodeOut",""],["NotifyPollWakeupOut",""],["NotifyRetrieveIn",""],["NotifyStoreOut",""],["Notify_Retrieve_Out",""],["OpenIn",""],["OpenOptions","Options controlling the behavior of files opened by the server in response to an open or create request."],["OpenOut",""],["OutHeader",""],["PollIn",""],["PollOut",""],["ReadIn",""],["ReleaseIn",""],["RemoveMappingIn",""],["RemoveMappingOne",""],["Rename2In",""],["RenameIn",""],["SetUpMappingFlags",""],["SetUpMappingIn",""],["SetattrIn",""],["SetattrValid",""],["SetxattrIn",""],["StatfsOut",""],["WriteIn",""],["WriteOut",""]]});