initSidebarItems({"enum":[["AllocateMode",""],["AsyncError",""],["Error",""],["SelectResult",""],["TimeoutAction",""]],"fn":[["block_on","Run a future to completion on the current thread."],["complete2","Creates a combinator that runs the two given futures to completion, returning a tuple of the outputs each yields."],["complete3","Creates a combinator that runs the three given futures to completion, returning a tuple of the outputs each yields."],["complete4","Creates a combinator that runs the four given futures to completion, returning a tuple of the outputs each yields."],["complete5","Creates a combinator that runs the five given futures to completion, returning a tuple of the outputs each yields."],["empty",""],["select2","Creates a combinator that runs the two given futures until one completes, returning a tuple containing the result of the finished future and the still pending future."],["select3","Creates a combinator that runs the three given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select4","Creates a combinator that runs the four given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select5","Creates a combinator that runs the five given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select6","Creates a combinator that runs the six given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select7",""],["unblock","Spawn a task to run in the `CancellableBlockingPool` static executor."],["unblock_disarm","Marks all the queued and in-flight tasks as cancelled. Any tasks queued after `disarm`ing will be cancelled. Doesnâ€™t not wait for all the tasks to get cancelled."]],"mod":[["async_types",""],["audio_streams_async","Implements the interface required by `audio_streams` using the cros_async Executor."],["blocking",""],["complete",""],["event",""],["io_ext","`IoSourceExt`"],["mem",""],["queue",""],["select",""],["sync",""],["sys",""],["timer",""],["waker",""]],"struct":[["AsyncWrapper","Simple wrapper struct to implement IntoAsync on foreign types."],["BlockingPool","A thread pool for running work that may block."],["CancellableBlockingPool","A thread pool for running work that may block."],["Empty",""],["Event","See the platform-specific Event struct for struct- and method-level documentation."],["EventAsync","An async version of `base::Event`."],["RecvTubeAsync",""],["SendTubeAsync",""],["TimerAsync","An async version of base::Timer."]],"trait":[["IntoAsync","Marker trait signifying that the implementor is suitable for use with cros_async. Examples of this include File, and base::net::UnixSeqpacket."],["IoSourceExt","Subtrait for general async IO."],["ReadAsync","Ergonomic methods for async reads."],["WriteAsync","Ergonomic methods for async writes."]],"type":[["AsyncResult",""],["Result",""]]});