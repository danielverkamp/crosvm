initSidebarItems({"constant":[["APIC_BASE_ADDRESS","Address of the start of APIC MMIO region."],["APIC_MEM_LENGTH_BYTES","Length in bytes of APIC MMIO region."],["IOAPIC_BASE_ADDRESS",""],["IOAPIC_MEM_LENGTH_BYTES",""]],"enum":[["ApicBusMsg","A message from an `Apic` to the `UserspaceIrqChip`."],["DestinationShorthand","A quick method of specifying all processors, all excluding self, or self as the destination."],["DeviceId",""],["IrqChipCap","A capability the `IrqChip` can possibly expose."],["VcpuRunState","A capability the `IrqChip` can possibly expose."]],"mod":[["apic",""],["ioapic",""],["kvm",""],["pic",""],["userspace",""],["x86_64",""]],"struct":[["Apic",""],["Interrupt","An interrupt to be sent to one or more `Apic`s."],["InterruptData","The vector and type of an `Interrupt`."],["InterruptDestination","Specifies the destination processors for an `Interrupt`."],["Ioapic",""],["IrqEvent",""],["IrqEventSource","Identification information about the source of an IrqEvent"],["KvmKernelIrqChip","IrqChip implementation where the entire IrqChip is emulated by KVM."],["KvmSplitIrqChip","The KvmSplitIrqsChip supports KVMâ€™s SPLIT_IRQCHIP feature, where the PIC and IOAPIC are emulated in userspace, while the local APICs are emulated in the kernel. The SPLIT_IRQCHIP feature only supports x86/x86_64 so we only define this IrqChip in crosvm for x86/x86_64."],["PendingInterrupts","Pending `Apic` interrupts to be injected into a vcpu."],["Pic",""],["UserspaceIrqChip","An `IrqChip` with all interrupt devices emulated in userspace.  `UserspaceIrqChip` works with any hypervisor, but only supports x86."]],"trait":[["IrqChip","Trait that abstracts interactions with interrupt controllers."],["IrqChipX86_64",""]],"type":[["IrqEventIndex",""],["Vector",""]]});